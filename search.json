[{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Bayesian analysis of networks of binary and/or ordinal variables using the bgm function","text":"example demonstrates use bgm function Bayesian analysis networks binary /ordinal data (.e., Markov Random Field (MRF) model mixed binary ordinal data). learn MRF model, check Marsman et al. (press), learn Bayesian analysis network models, check Huth et al. (2023) Sekulovski et al. (2024). ’ll examine real data PTSD symptoms 362 Chinese adults survived Wenchuan earthquake tragically lost child (McNally et al., 2015). data comes 17-question survey participants rated much symptom bothered past month scale “” “extremely.”","code":"library(bgms)"},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"example-bayesian-model-averaging","dir":"Articles","previous_headings":"","what":"Example – Bayesian Model Averaging","title":"Bayesian analysis of networks of binary and/or ordinal variables using the bgm function","text":"comprehensive Bayesian analysis data considers network structure corresponding parameters. numerous structures underlie network, employ simulation-based methods investigate posterior distribution network structures parameters (Marsman et al., press). bgm function performs task, iteratively simulating values posterior distribution network structures parameters.","code":""},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"usage","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging","what":"Usage","title":"Bayesian analysis of networks of binary and/or ordinal variables using the bgm function","text":"","code":"bgm(x,     variable_type = \"ordinal\",     reference_category,     iter = 1e4,     burnin = 1e3,     interaction_scale = 2.5,     threshold_alpha = 0.5,     threshold_beta = 0.5,     edge_selection = TRUE,     edge_prior = c(\"Bernoulli\", \"Beta-Bernoulli\", \"Stochastic-Block\"),     inclusion_probability = 0.5,     beta_bernoulli_alpha = 1,     beta_bernoulli_beta = 1,     dirichlet_alpha = 1,     na.action = c(\"listwise\", \"impute\"),     save = FALSE,     display_progress = TRUE)"},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"arguments","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging","what":"Arguments","title":"Bayesian analysis of networks of binary and/or ordinal variables using the bgm function","text":"x: data frame matrix n rows p columns, containing binary ordinal variables n independent observations p variables network. Regular binary ordinal variables recoded non-negative integers (0, 1, …, m) already done. Unobserved categories collapsed categories recoding (.e., category 1 unobserved, data recoded (0, 2) (0, 1)). Blume-Capel ordinal variables also coded non-negative integers already done. However, since ``distance’’ reference category plays important role model, unobserved categories collapsed recoding. variable_type: kind variables x? Can single character string specifying variable type p variables vector character strings length p specifying type variable x separately. Currently, bgm supports “ordinal” “blume-capel”. Binary variables automatically treated “ordinal”. Defaults variable_type = \"ordinal\". reference_category: reference category Blume-Capel model. integer within range integer scores observed “blume-capel” variable. Can single number specifying reference category Blume-Capel variables , vector length p -th element contains reference category variable Blume-Capel, bgm ignores elements variable types. value reference category also recoded bgm recodes corresponding observations. required least one variable type “blume-capel”. iter: many iterations Gibbs sampler run? default 1e4 illustrative purposes. stable estimates, recommended run Gibbs sampler least 1e5 iterations. burnin: number iterations Gibbs sampler output saved. Since may take time Gibbs sampler converge posterior distribution, recommended set number low. interaction_scale: scale Cauchy distribution used prior pairwise interaction parameters. Defaults 2.5. threshold_alpha, threshold_beta: shape parameters beta-prime prior density threshold parameters. Must positive values. two values equal, prior density symmetric zero. threshold_beta greater threshold_alpha, distribution skewed left, threshold_beta less threshold_alpha, skewed right. Smaller values tend lead diffuse prior distributions. edge_selection: function perform Bayesian edge selection edges MRF addition estimating parameters (edge_selection = TRUE), just estimate parameters (edge_selection = FALSE)? default edge_selection = TRUE. edge_prior: prior distribution edges structure network. Two prior distributions currently implemented: Bernoulli model edge_prior = \"Bernoulli\" assumes probability edge two variables included equal inclusion_probability independent edges variables. inclusion_probability = 0.5, implies network structure receives prior weight. Beta-Bernoulli model edge_prior = \"Beta-Bernoulli\" assumes beta prior unknown inclusion probability shape parameters beta_bernoulli_alpha beta_bernoulli_beta. beta_bernoulli_alpha = 1 beta_bernoulli_beta = 1, means networks complexity (number edges) receive prior weight. Defaults `edge_prior = “Bernoulli”’. Stochastic Block model assumes nodes can organized blocks clusters. principle, assignment nodes clusters unknown, model implemented considers possible options (.e., specifies Dirichlet process node block allocation Geng et al. (2019)). model advantageous nodes expected fall distinct clusters. inclusion probabilities edges defined level clusters, beta prior unknown inclusion probability shape parameters . default . inclusion_probability: prior edge inclusion probability Bernoulli model. Can single probability, matrix p rows p columns specifying inclusion probability edge pair. Defaults inclusion_probability = 0.5. beta_bernoulli_alpha, beta_bernoulli_beta: two shape parameters Beta prior density Bernoulli inclusion probability. Must positive numbers. Defaults beta_bernoulli_alpha = 1 beta_bernoulli_beta = 1. dirichlet_alpha: shape Dirichlet prior node--block allocation parameters Stochastic Block model. Must positive number. Defaults dirichlet_alpha = 1 na.action: want function handle missing data? na.action = \"listwise\", listwise deletion used. na.action = \"impute\", missing data imputed iteratively MCMC procedure. Since imputation missing data can negative impact convergence speed MCMC procedure, recommended run MCMC iterations. Also, since numerical routines search mode posterior imputation option, bgm function automatically switch interaction_prior = \"Cauchy\" adaptive = TRUE. save: function collect return samples Gibbs sampler (save = TRUE)? return (model-averaged) posterior means (save = FALSE)? Defaults FALSE. display_progress: function show progress bar (display_progress = TRUE)? (display_progress = FALSE)? Defaults TRUE.","code":""},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"output","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging","what":"Output","title":"Bayesian analysis of networks of binary and/or ordinal variables using the bgm function","text":"save = FALSE (default), result list containing following matrices: indicator: matrix p rows p columns, containing posterior inclusion probabilities individual edges. interactions: matrix p rows p columns, containing model-averaged posterior means pairwise associations. thresholds: matrix p rows max(m) columns, containing model-averaged category thresholds. save = TRUE, result list containing: indicator: matrix iter rows p * (p - 1) / 2 columns, containing edge inclusion indicators every iteration Gibbs sampler. interactions: matrix iter rows p * (p - 1) / 2 columns, containing parameter states every iteration Gibbs sampler pairwise associations. thresholds: matrix iter rows sum(m) columns, containing parameter states every iteration Gibbs sampler category thresholds. Column averages matrices provide model-averaged posterior means.","code":""},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"analysis","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging","what":"Analysis","title":"Bayesian analysis of networks of binary and/or ordinal variables using the bgm function","text":"save time, ran algorithm using default number iterations, 10,000. However, probably enough fully explore posterior distribution network structures parameters. obtain reliable accurate estimates, recommend increasing number iterations 100,000 . function employs simulation method averages plausible network structures estimate posterior inclusion probability, represents probability network containing edge question generated observed data. Let’s plot relation interaction estimates inclusion probabilities.  see estimated edge weights (interactions) near zero low inclusion probabilities, edge weights far zero high inclusion probabilities. zero inclusion probability corresponds bgm setting edge weight exactly zero.","code":"fit <-  bgm(x = Wenchuan) par(mar = c(6, 5, 1, 1)) plot(x = fit$interactions[lower.tri(fit$interactions)],       y = fit$indicator[lower.tri(fit$indicator)], ylim = c(0, 1),       xlab = \"\", ylab = \"\", axes = FALSE, pch = 21, bg = \"gray\", cex = 1.3) abline(h = 0, lty = 2, col = \"gray\") abline(h = 1, lty = 2, col = \"gray\") abline(h = .5, lty = 2, col = \"gray\") mtext(\"Posterior mean edge weight\", side = 1, line = 3, cex = 1.7) mtext(\"Posterior inclusion probability\", side = 2, line = 3, cex = 1.7) axis(1) axis(2, las = 1)"},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"median-probability-network","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging > Analysis","what":"Median probability network","title":"Bayesian analysis of networks of binary and/or ordinal variables using the bgm function","text":"Using posterior inclusion probabilities, can also identify median probability network. network, include edges posterior inclusion probability greater 0.5. can create median probability model follows.","code":"library(qgraph) #For plotting the estimated network    posterior.inclusion <- fit$indicator[lower.tri(fit$indicator)] tmp <- fit$interactions[lower.tri(fit$interactions)] tmp[posterior.inclusion < 0.5] = 0    median.prob.model <- matrix(0, nrow = ncol(Wenchuan), ncol = ncol(Wenchuan)) median.prob.model[lower.tri(median.prob.model)] <- tmp median.prob.model <- median.prob.model + t(median.prob.model)    rownames(median.prob.model) <- colnames(Wenchuan) colnames(median.prob.model) <- colnames(Wenchuan)    qgraph(median.prob.model,         theme = \"TeamFortress\",         maximum = .5,        fade = FALSE,        color = c(\"#f0ae0e\"), vsize = 10, repulsion = .9,         label.cex = 1.1, label.scale = \"FALSE\",         labels = colnames(Wenchuan))"},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"inclusion-bayes-factors","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging > Analysis","what":"Inclusion Bayes factors","title":"Bayesian analysis of networks of binary and/or ordinal variables using the bgm function","text":"One benefits using fully Bayesian approach allows us calculate inclusion Bayes factor Huth et al. (2023). inclusion Bayes factor represents relative evidence including excluding connection pair nodes network. inclusion Bayes factor 10 suggests observed data ten times likely come network includes relationship. Conversely, inclusion Bayes factor 1/10 implies observed data ten times likely come network excludes relationship. ’s important note inclusion Bayes factors can also reveal limited support either hypothesis. current version analysis, assumed prior inclusion probabilities equal 0.5. Users can change either adapting inclusion_probability choose edge_prior = \"Beta-Bernoulli\" pick different values beta_bernoulli_alpha beta_bernoulli_beta. Since inclusion probability 0.5, prior odds inclusion vs exclusion one. calculate inclusion Bayes factors, can thus simply convert estimated posterior inclusion probabilities. easier visualization, common use natural logarithm Bayes factor plotting. Lets plot relation estimated edge weights inclusion Bayes factor.  example, use cut-value 10 inclusion Bayes factors. Values greater 10 suggest evidence edge inclusion, values less 1/10 indicate evidence edge exclusion, values 1/10 10 considered represent weak evidence.","code":"# Calculate the inclusion BFs prior.odds = 1 posterior.inclusion = fit$indicator[lower.tri(fit$indicator)] posterior.odds = posterior.inclusion / (1 - posterior.inclusion) log.bayesfactor = log(posterior.odds / prior.odds) #The next line is used to truncate the extreme values of the Bayes factor in the plot log.bayesfactor[log.bayesfactor > 5] = 5 par(mar = c(5, 5, 1, 1) + 0.1) plot(fit$interactions[lower.tri(fit$interactions)], log.bayesfactor, pch = 21, bg = \"#bfbfbf\",      cex = 1.3, axes = FALSE, xlab = \"\", ylab = \"\", ylim = c(-5, 5.5),     xlim = c(-0.5, 1.5)) axis(1) axis(2, las = 1) abline(h = log(1/10), lwd = 2, col = \"#bfbfbf\") abline(h = log(10), lwd = 2, col = \"#bfbfbf\")  text(x = 1, y = log(1 / 10), labels = \"Evidence for exclusion\", pos = 1,     cex = 1.7) text(x = 1, y = log(10), labels = \"Evidence for inclusion\", pos = 3, cex = 1.7) text(x = 1, y = 0, labels = \"Weak evidence\", cex = 1.7) mtext(\"Log-inclusion Bayes factor\", side = 2, line = 3, cex = 1.5, las = 0) mtext(\"Posterior mean edge weights \", side = 1, line = 3.7, cex = 1.5, las = 0)"},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"analysis-with-raw-output","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging","what":"Analysis with raw output","title":"Bayesian analysis of networks of binary and/or ordinal variables using the bgm function","text":"purposes, default output bgm sufficient, providing us posterior means edge indicators parameters. However, cases, may want use raw samples joint posterior distribution. estimate posterior distribution specific parameter, assess many network structures fit given data, create Bayes factors hypotheses involving multiple edges. can obtain raw samples setting save = TRUE.","code":"fit <-  bgm(x = Wenchuan, save = TRUE)"},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"posterior-density-of-edge-weight","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging > Analysis with raw output","what":"Posterior density of edge weight","title":"Bayesian analysis of networks of binary and/or ordinal variables using the bgm function","text":"can employ following code use posterior samples plotting posterior density single edge:  posterior distribution edge weight averaged across structures, can lead greater dispersion compared estimating specific model. takes account uncertainty network structures parameter estimates associated structures. Note estimate smooth. used 10,000 samples estimate posterior distribution.","code":"den = density(fit$interactions[,1], bw = \"SJ\") i = which.min(abs(den$x - mean(fit$interactions[,1])))[1] x = den$x[i] f = den$y[i] par(cex.main = 1.5, mar = c(5, 6, 1, 1) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5, font.lab = 2, cex.axis = 1.3, bty = \"n\", las = 1) plot(den, axes = FALSE, xlab=\"\", ylab=\"\", main = \"\", frame.plot = FALSE) axis(1) axis(2) par(las = 0) mtext(text = \"Edge weight\", side = 1, line = 2.5, cex = 1.5) mtext(text = \"Posterior density\", side = 2, line = 2.5, cex = 1.5) # Add a point to indicate the posterior mean points(x, f, pch = 21, bg = \"grey\", cex = 1.7)"},{"path":"https://maartenMarsman.github.io/bgms/articles/introduction.html","id":"the-posterior-distribution-of-structures","dir":"Articles","previous_headings":"Example – Bayesian Model Averaging","what":"The posterior distribution of structures","title":"Bayesian analysis of networks of binary and/or ordinal variables using the bgm function","text":"can also use raw samples count number unique structures bgm encountered 10,000 iterations. clearly many different network structures fit data. Let’s estimate posterior probabilities. plausible model accounts less 1 percent posterior probability. conclusion, significant uncertainty network structure generated data. analysis Marsman et al. (press), demonstrated even uncertainty network structure generated data, inclusion Bayes factors highly robust. can help identify substructures network strong confidence. However, perform analyses, need run bgm many iterations. analysis, Marsman et al. (press) used 1,000,000 iterations. details, interested readers can refer analysis script .","code":"I = 2 * fit$indicator - 1 S = unique(I) nrow(S) #> [1] 9177 Ps = vector(length = nrow(S)) for(r in 1:nrow(S)) {   s = S[r, ]   tmp = I %*% s   Ps[r] = sum(tmp == ncol(I)) } Ps = Ps / nrow(I) * 100 max(Ps) #> [1] 0.08"},{"path":[]},{"path":"https://maartenMarsman.github.io/bgms/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maarten Marsman. Author, maintainer. Giuseppe Arena. Contributor. Karoline Huth. Contributor. Nikola Sekulovski. Contributor. Don van den Bergh. Contributor.","code":""},{"path":"https://maartenMarsman.github.io/bgms/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marsman, M., Arena, G., Huth, K., Sekulovski, N., & van den Bergh, D. (2024). bgms: Bayesian analysis networks binary /ordinal variables. https://CRAN.R-project.org/package=bgms","code":"@Manual{,   title = {bgms: Bayesian analysis of networks of binary and/or ordinal variables},   author = {Maarten Marsman and Giuseppe Arena and Karoline Huth and Nikola Sekulovski and Don {van den Bergh}},   year = {2025},   url = {https://CRAN.R-project.org/package=bgms},   note = {R package version 0.1.4.3}, }"},{"path":"https://maartenMarsman.github.io/bgms/index.html","id":"bgms-bayesian-analysis-of-networks-of-binary-andor-ordinal-variables","dir":"","previous_headings":"","what":"Bayesian Analysis of Networks of Binary and/or Ordinal Variables","title":"Bayesian Analysis of Networks of Binary and/or Ordinal Variables","text":"R package bgms provides tools Bayesian analysis ordinal Markov random field, graphical model describing network binary /ordinal variables (Marsman, van den Bergh, & Haslbeck, press). pseudolikelihood used approximate likelihood graphical model, Markov chain Monte Carlo methods used simulate corresponding pseudoposterior distribution graphical model parameters. bgm function can used one-sample design bgmCompare function can used independent-sample design (see Marsman, Waldorp, Sekulovski, & Haslbeck, 2024). functions can model selection effects. one-sample designs, bgm function models presence absence edges pairs variables network. estimated posterior inclusion probability indicates plausible network edge two corresponding variables produced observed data, can converted Bayes factor test conditional independence. bgm function can also model presence absence communities clusters variables network. estimated posterior probability distribution number clusters indicates plausible network corresponding number clusters produced observed data, can converted Bayes factor test clustering (see Sekulovski, Arena, Friel, & Marsman, 2025). independent-sample design, bgmCompare function models selection group differences edge weights possibly category thresholds. estimated posterior inclusion probability indicates plausible graphical models difference corresponding edge weight category threshold generated data hand, can converted Bayes factor test parameter equivalence.","code":""},{"path":"https://maartenMarsman.github.io/bgms/index.html","id":"why-use-markov-random-fields","dir":"","previous_headings":"","what":"Why use Markov Random Fields?","title":"Bayesian Analysis of Networks of Binary and/or Ordinal Variables","text":"Multivariate analysis using graphical models received much attention recent psychological psychometric literature (Robinaugh et al., 2020; Marsman, & Rhemtulla, 2022; Contreras et al., 2019). graphical models Markov Random Field (MRF) models, whose graph structure reflects partial associations variables (Kindermann, & Snell, 1980). models, missing edge two variables network implies variables independent, given remaining variables (Lauritzen, 2004). words, remaining variables network fully account potential association unconnected variables.","code":""},{"path":"https://maartenMarsman.github.io/bgms/index.html","id":"why-use-a-bayesian-approach-to-analyze-the-mrf","dir":"","previous_headings":"","what":"Why use a Bayesian approach to analyze the MRF?","title":"Bayesian Analysis of Networks of Binary and/or Ordinal Variables","text":"Testing structure MRF one-sample design requires us determine plausibility opposing hypotheses conditional dependence conditional independence. , plausible observed data come network structure includes edge two variables compared network structure excludes edge? Similarly, testing group differences MRF independent-samples design requires us determine plausibility opposing hypotheses parameter difference parameter equivalence. , plausible observed data come MRFs differences specific edge weights threshold parameters compared MRFs differ parameter? Frequentist approaches limited respect can reject, support, null hypotheses conditional independence parameter equivalence. leads problem edge excluded, know whether edge absent population enough data reject null hypothesis independence. Similarly, difference excluded, know whether difference parameter different groups enough data reject null hypothesis parameter equivalence. avoid problem, advocate Bayesian approach using Bayes factors. one-sample designs, inclusion Bayes factor (Huth et al., 2023; Sekulovski et al., 2024) allows us quantify much data support conditional dependence -evidence edge presence - conditional independence -evidence edge absence. also allows us conclude limited support either hypothesis - absence evidence. independent-sample designs, can used quantify much data support hypotheses parameter difference equivalence. output bgm bgmCompare functions can used estimate inclusion Bayes factors.","code":""},{"path":"https://maartenMarsman.github.io/bgms/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Analysis of Networks of Binary and/or Ordinal Variables","text":"current developmental version can installed ","code":"if (!requireNamespace(\"remotes\")) {    install.packages(\"remotes\")    }    remotes::install_github(\"MaartenMarsman/bgms\")"},{"path":[]},{"path":"https://maartenMarsman.github.io/bgms/reference/Wenchuan.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-traumatic stress disorder symptoms of Wenchuan earthquake survivors — Wenchuan","title":"Post-traumatic stress disorder symptoms of Wenchuan earthquake survivors — Wenchuan","text":"data set containing items measuring symptoms posttraumatic stress disorder (PTSD) (McNally et al. 2015) . Participants 362 Chinese adults survived Wenchuan earthquake lost least one child disaster. PTSD symptoms reported using civilian version Posttraumatic Checklist, consists 17 items, assessing one DSM-IV symptoms PTSD. Participants rated item five-point scale ranging “” “extremely” indicate much symptom bothered past month.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/Wenchuan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-traumatic stress disorder symptoms of Wenchuan earthquake survivors — Wenchuan","text":"","code":"data(\"Wenchuan\")"},{"path":"https://maartenMarsman.github.io/bgms/reference/Wenchuan.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Post-traumatic stress disorder symptoms of Wenchuan earthquake survivors — Wenchuan","text":"matrix 362 rows 17 columns: intrusion Repeated, disturbing memories, thoughts, images   stressful experience past? dreams Repeated, disturbing dreams stressful experience   past? flash Suddenly acting feeling stressful experience   happening (reliving )? upset Feeling upset something reminded stressful   experience past? physior physical reactions (e.g., heart pounding, trouble   breathing, sweating) something reminded stressful experience   past? avoidth Avoiding thinking talking stressful   experience past avoiding feelings related ? avoidact Avoiding activities situations reminded   stressful experience past? amnesia Trouble remembering important parts stressful   experience past? lossint Loss interest activities used enjoy? distant Feeling distant cut people? numb Feeling emotionally numb unable loving   feelings close ? future Feeling future somehow cut short? sleep Trouble falling staying asleep? anger Feeling irritable angry outbursts? concen difficulty concentrating? hyper \"super-alert\" watchful guard? startle Feeling jumpy easily startled?","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/Wenchuan.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Post-traumatic stress disorder symptoms of Wenchuan earthquake survivors — Wenchuan","text":"http://psychosystems.org/wp-content/uploads/2014/10/Wenchuan.csv","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/Wenchuan.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Post-traumatic stress disorder symptoms of Wenchuan earthquake survivors — Wenchuan","text":"McNally RJ, Robinaugh DJ, Wu GWY, Wang L, Deserno MK, Borsboom D (2015). “Mental disorders causal systems: network approach posttraumatic stress disorder.” Clinical Psychological Science, 6, 836–849. doi:10.1177/2167702614553230 .","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgm.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","title":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","text":"function bgm explores joint pseudoposterior distribution parameters possibly edge indicators Markov Random Field model mixed binary ordinal variables.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","text":"","code":"bgm(   x,   variable_type = \"ordinal\",   reference_category,   iter = 10000,   burnin = 500,   interaction_scale = 2.5,   threshold_alpha = 0.5,   threshold_beta = 0.5,   edge_selection = TRUE,   edge_prior = c(\"Bernoulli\", \"Beta-Bernoulli\", \"Stochastic-Block\"),   inclusion_probability = 0.5,   beta_bernoulli_alpha = 1,   beta_bernoulli_beta = 1,   dirichlet_alpha = 1,   lambda = 1,   na_action = c(\"listwise\", \"impute\"),   save = FALSE,   display_progress = TRUE )"},{"path":"https://maartenMarsman.github.io/bgms/reference/bgm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","text":"x data frame matrix n rows p columns containing binary ordinal variables n independent observations p variables network. Regular binary ordinal variables recoded non-negative integers (0, 1, ..., m) already done. Unobserved categories collapsed categories recoding (.e., category 1 unobserved, data recoded (0, 2) (0, 1)). Blume-Capel ordinal variables also coded non-negative integers already done. However, since “distance” reference category plays important role model, unobserved categories collapsed recoding. variable_type kind variables x? Can single character string specifying variable type p variables vector character strings length p specifying type variable x separately. Currently, bgm supports “ordinal” “blume-capel”. Binary variables automatically treated “ordinal’’. Defaults variable_type = \"ordinal\". reference_category reference category Blume-Capel model. integer within range integer scores observed “blume-capel” variable. Can single number specifying reference category Blume-Capel variables , vector length p -th element contains reference category variable Blume-Capel, bgm ignores elements variable types. value reference category also recoded bgm recodes corresponding observations. required least one variable type “blume-capel”. iter many iterations Gibbs sampler run? default 1e4 illustrative purposes. stable estimates, recommended run Gibbs sampler least 1e5 iterations. burnin number iterations Gibbs sampler saving output. Since may take time Gibbs sampler converge posterior distribution, recommended set number low. edge_selection = TRUE, bgm function perform 2 * burnin iterations, first burnin iterations without edge selection, burnin iterations edge selection. helps ensure Markov chain used estimation starts good parameter values adaptive MH proposals properly calibrated. interaction_scale scale Cauchy distribution used prior pairwise interaction parameters. Defaults 2.5. threshold_alpha, threshold_beta shape parameters beta-prime prior density threshold parameters. Must positive values. two values equal, prior density symmetric zero. threshold_beta greater threshold_alpha, distribution skewed left, threshold_beta less threshold_alpha, skewed right. Smaller values tend lead diffuse prior distributions. edge_selection function perform Bayesian edge selection edges MRF addition estimating parameters (edge_selection = TRUE), just estimate parameters (edge_selection = FALSE)? default edge_selection = TRUE. edge_prior inclusion exclusion individual edges network modeled binary indicator variables capture structure network. argument edge_prior used set prior distribution edge indicator variables, .e., structure network. Currently, three options implemented: Bernoulli model edge_prior = \"Bernoulli\" assumes probability edge two variables included equal inclusion_probability independent edges variables. inclusion_probability = 0.5, means possible network structure given prior weight. Beta-Bernoulli model edge_prior = \"Beta-Bernoulli\" assumes beta prior unknown inclusion probability shape parameters beta_bernoulli_alpha beta_bernoulli_beta. beta_bernoulli_alpha = 1 beta_bernoulli_beta = 1, means networks complexity (number edges) get prior weight. Stochastic Block model edge_prior = \"Stochastic-Block\" assumes nodes can organized blocks clusters. principle, assignment nodes clusters unknown, model implemented considers possible options (.e., specifies Dirichlet prior probability allocations described Geng et al. 2019) . model advantageous nodes expected fall distinct clusters. inclusion probabilities edges defined level clusters, beta prior unknown inclusion probability shape parameters beta_bernoulli_alpha beta_bernoulli_beta, Dirichlet prior cluster assignment probabilities common concentration parameter dirichlet_alpha zero-truncated Poisson prior number clusters rate parameter lambda, indicating expected number clusters. default edge_prior = \"Bernoulli\". inclusion_probability prior edge inclusion probability Bernoulli model. Can single probability, matrix p rows p columns specifying inclusion probability edge pair. default inclusion_probability = 0.5. beta_bernoulli_alpha, beta_bernoulli_beta two shape parameters Beta prior density Bernoulli inclusion probability. Must positive numbers. Defaults beta_bernoulli_alpha = 1 beta_bernoulli_beta = 1. dirichlet_alpha shape Dirichlet prior node--block allocation probabilities Stochastic Block model. lambda rate parameter zero-truncated Poisson prior number cluster Stochastic Block model. na_action want function handle missing data? na_action = \"listwise\", listwise deletion used. na_action = \"impute\", missing data imputed iteratively MCMC procedure. Since imputation missing data can negative impact convergence speed MCMC procedure, recommended run MCMC iterations. Also, since numerical routines search mode posterior imputation option, bgm function automatically switch interaction_prior = \"Cauchy\" adaptive = TRUE. save function collect return samples Gibbs sampler (save = TRUE)? return (model-averaged) posterior means (save = FALSE)? Defaults FALSE. display_progress function show progress bar (display_progress = TRUE)? (display_progress = FALSE)? default TRUE.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","text":"save = FALSE (default), result list class “bgms” containing following matrices model-averaged quantities: indicator: matrix p rows p columns, containing posterior inclusion probabilities individual edges. interactions: matrix p rows p columns, containing model-averaged posterior means pairwise associations. thresholds: matrix p rows max(m) columns, containing model-averaged category thresholds. case “blume-capel” variables, first entry parameter linear effect second entry parameter quadratic effect, models offset reference category. case edge_prior = \"Stochastic-Block\", two additional elements returned: vector allocations estimated cluster assignments     nodes, calculated using method proposed (Dahl2009)      also used (GengEtAl_2019) . matrix components estimated posterior probability     number components (clusters) network. probabilities     calculated based Equation 3.7 (miller2018mixture) , computes     conditional probability number components given     number clusters. number clusters derived     cardinality sampled allocations vector iteration     MCMC sampler (see save = TRUE). save = TRUE, result list class “bgms” containing: indicator: matrix iter rows p * (p - 1) / 2 columns, containing edge inclusion indicators every iteration Gibbs sampler. interactions: matrix iter rows p * (p - 1) / 2 columns, containing parameter states every iteration Gibbs sampler pairwise associations. thresholds: matrix iter rows sum(m) columns, containing parameter states every iteration Gibbs sampler category thresholds. case edge_prior = \"Stochastic-Block\" matrix allocations cluster assignments nodes iteration returned. matrix can used calculate posterior probability number clusters utilizing summary_SBM function. Column averages matrices provide model-averaged posterior means. Except allocations matrix, summary_SBM needs utilized. addition analysis results, bgm output lists arguments call. useful post-processing results.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","text":"Currently, bgm supports two types ordinal variables. regular, default, ordinal variable type restrictions distribution. Every response category except first receives threshold parameter. Blume-Capel ordinal variable assumes specific reference category, “neutral” Likert scale, responses scored terms distance reference category. Specifically, Blume-Capel model specifies following quadratic model threshold parameters: $$\\mu_{\\text{c}} = \\alpha \\times \\text{c} + \\beta \\times (\\text{c} - \\text{r})^2,$$ \\(\\mu_{\\text{c}}\\) threshold category c. parameter \\(\\alpha\\) models linear trend across categories, \\(\\alpha > 0\\) leads increasing number observations higher response categories \\(\\alpha <0\\) leads decreasing number observations higher response categories. parameter \\(\\beta\\) models response style terms offset respect reference category \\(r\\); \\(\\beta<0\\) preference respond reference category (.e., model introduces penalty responding category away reference_category category r), \\(\\beta > 0\\) preference score extreme categories away reference_category category. Bayesian estimation procedure (edge_selection = FALSE) simply estimates threshold pairwise interaction parameters ordinal MRF, Bayesian edge selection procedure (edge_selection = TRUE) also models probability individual edges included excluded model. Bayesian edge selection imposes discrete spike slab prior distribution pairwise interactions. formulating mixture mutually singular distributions, function can use combination Metropolis-Hastings Gibbs sampling create Markov chain joint posterior distribution invariant. current option slab distribution Cauchy optional scaling parameter. slab distribution also used prior interaction parameters Bayesian estimation. beta-prime distribution used exponent category parameters. Bayesian edge selection, two prior distributions implemented edge inclusion variables (.e., prior probability edge included); Bernoulli prior Beta-Bernoulli prior.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","text":"Geng J, Bhattacharya , Pati D (2019). “Probabilistic community detection unknown number communities.” Journal American Statistical Association, 114, 893–905. doi:10.1080/01621459.2018.1458618 .","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian edge selection or Bayesian estimation for a Markov random field model for binary and/or ordinal variables. — bgm","text":"","code":"# \\donttest{  #Store user par() settings  op <- par(no.readonly = TRUE)   ##Analyse the Wenchuan dataset   # Here, we use 1e4 iterations, for an actual analysis please use at least  # 1e5 iterations.  fit = bgm(x = Wenchuan) #> Warning: There were 18 rows with missing observations in the input matrix x. #> Since na_action = listwise these rows were excluded from the analysis.    #------------------------------------------------------------------------------|  # INCLUSION - EDGE WEIGHT PLOT  #------------------------------------------------------------------------------|   par(mar = c(6, 5, 1, 1))  plot(x = fit$interactions[lower.tri(fit$interactions)],       y = fit$indicator[lower.tri(fit$indicator)], ylim = c(0, 1),       xlab = \"\", ylab = \"\", axes = FALSE, pch = 21, bg = \"gray\", cex = 1.3)  abline(h = 0, lty = 2, col = \"gray\")  abline(h = 1, lty = 2, col = \"gray\")  abline(h = .5, lty = 2, col = \"gray\")  mtext(\"Posterior Mode Edge Weight\", side = 1, line = 3, cex = 1.7)  mtext(\"Posterior Inclusion Probability\", side = 2, line = 3, cex = 1.7)  axis(1)  axis(2, las = 1)     #------------------------------------------------------------------------------|  # EVIDENCE - EDGE WEIGHT PLOT  #------------------------------------------------------------------------------|   #For the default choice of the structure prior, the prior odds equal one:  prior.odds = 1  posterior.inclusion = fit$indicator[lower.tri(fit$indicator)]  posterior.odds = posterior.inclusion / (1 - posterior.inclusion)  log.bayesfactor = log(posterior.odds / prior.odds)  log.bayesfactor[log.bayesfactor > 5] = 5   par(mar = c(5, 5, 1, 1) + 0.1)  plot(fit$interactions[lower.tri(fit$interactions)], log.bayesfactor, pch = 21, bg = \"#bfbfbf\",       cex = 1.3, axes = FALSE, xlab = \"\", ylab = \"\", ylim = c(-5, 5.5),       xlim = c(-0.5, 1.5))  axis(1)  axis(2, las = 1)  abline(h = log(1/10), lwd = 2, col = \"#bfbfbf\")  abline(h = log(10), lwd = 2, col = \"#bfbfbf\")   text(x = 1, y = log(1 / 10), labels = \"Evidence for Exclusion\", pos = 1,       cex = 1.7)  text(x = 1, y = log(10), labels = \"Evidence for Inclusion\", pos = 3, cex = 1.7)  text(x = 1, y = 0, labels = \"Absence of Evidence\", cex = 1.7)  mtext(\"Log-Inclusion Bayes Factor\", side = 2, line = 3, cex = 1.5, las = 0)  mtext(\"Posterior Mean Interactions \", side = 1, line = 3.7, cex = 1.5, las = 0)     #------------------------------------------------------------------------------|  # THE MEDIAN PROBABILITY NETWORK  #------------------------------------------------------------------------------|   tmp = fit$interactions[lower.tri(fit$interactions)]  tmp[posterior.inclusion < 0.5] = 0   median.prob.model = matrix(0, nrow = ncol(Wenchuan), ncol = ncol(Wenchuan))  median.prob.model[lower.tri(median.prob.model)] = tmp  median.prob.model = median.prob.model + t(median.prob.model)   rownames(median.prob.model) = colnames(Wenchuan)  colnames(median.prob.model) = colnames(Wenchuan)   library(qgraph)  qgraph(median.prob.model,         theme = \"TeamFortress\",         maximum = .5,         fade = FALSE,         color = c(\"#f0ae0e\"), vsize = 10, repulsion = .9,         label.cex = 1.1, label.scale = \"FALSE\",         labels = colnames(Wenchuan))    #Restore user par() settings  par(op) # }"},{"path":"https://maartenMarsman.github.io/bgms/reference/bgmCompare.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Variable Selection or Bayesian Estimation for Differences in Markov Random Fields — bgmCompare","title":"Bayesian Variable Selection or Bayesian Estimation for Differences in Markov Random Fields — bgmCompare","text":"`bgmCompare` function estimates pseudoposterior distribution parameters Markov Random Field (MRF) model mixed binary ordinal variables, well differences pairwise interactions category thresholds across groups. Groups assumed `G` independent samples.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgmCompare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Variable Selection or Bayesian Estimation for Differences in Markov Random Fields — bgmCompare","text":"","code":"bgmCompare(   x,   y,   g,   difference_selection = TRUE,   main_difference_model = c(\"Free\", \"Collapse\", \"Constrain\"),   variable_type = \"ordinal\",   reference_category,   pairwise_difference_scale = 1,   main_difference_scale = 1,   pairwise_difference_prior = c(\"Bernoulli\", \"Beta-Bernoulli\"),   main_difference_prior = c(\"Bernoulli\", \"Beta-Bernoulli\"),   pairwise_difference_probability = 0.5,   main_difference_probability = 0.5,   pairwise_beta_bernoulli_alpha = 1,   pairwise_beta_bernoulli_beta = 1,   main_beta_bernoulli_alpha = 1,   main_beta_bernoulli_beta = 1,   interaction_scale = 2.5,   threshold_alpha = 0.5,   threshold_beta = 0.5,   iter = 10000,   burnin = 500,   na_action = c(\"listwise\", \"impute\"),   save = FALSE,   save_main = FALSE,   save_pairwise = FALSE,   save_indicator = FALSE,   display_progress = TRUE )"},{"path":"https://maartenMarsman.github.io/bgms/reference/bgmCompare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Variable Selection or Bayesian Estimation for Differences in Markov Random Fields — bgmCompare","text":"x Data frame matrix binary ordinal responses. Regular ordinal variables coded integers starting 0. Missing categories collapsed regular ordinal variables retained Blume-Capel variables. y data frame matrix similar `x`, used two-group designs. `x` contains Group 1 data, `y` contains Group 2 data. Ignored multi-group designs. g Group membership vector rows `x`. Required multi-group designs; ignored `y` provided. difference_selection Logical. Enables modeling inclusion/exclusion parameter differences (`TRUE`) estimation differences (`FALSE`). Default: `TRUE`. main_difference_model Character. Specifies handle threshold differences categories unmatched. Options: `\"Collapse\"`, `\"Free\"`. option \"Collapse\" collapses categories unobserved one groups. option \"Free\" option estimates thresholds separately group model difference. Default: `\"Free\"`. variable_type Character vector. Specifies type variables `x` (`\"ordinal\"` `\"blume-capel\"`). Default: `\"ordinal\"`. reference_category Integer vector. Reference category Blume-Capel variables. Required least one Blume-Capel variable. pairwise_difference_scale Double. Scale parameter Cauchy prior pairwise differences. Default: `1`. main_difference_scale Double. Scale parameter Cauchy prior threshold differences. Default: `1`. pairwise_difference_prior, main_difference_prior Character. Specifies inclusion probability model (`\"Bernoulli\"` `\"Beta-Bernoulli\"`). Default: `\"Bernoulli\"`. pairwise_difference_probability numeric value \\(p \\times p\\) matrix specifying prior inclusion probability pairwise difference Bernoulli model. single value applies probability pairs, matrix allows edge-specific probabilities. Defaults 0.5 (equal prior probability inclusion exclusion). main_difference_probability numeric value length-\\(p\\) vector specifying prior inclusion probability threshold difference Bernoulli model. single value applies probability variables, vector allows variable-specific probabilities. Defaults 0.5, indicating prior preference. pairwise_beta_bernoulli_alpha, pairwise_beta_bernoulli_beta Double. Shape parameters Beta-Bernoulli prior pairwise differences. main_beta_bernoulli_alpha, main_beta_bernoulli_beta Double. Shape parameters Beta-Bernoulli prior threshold differences. interaction_scale Double. Scale Cauchy prior nuisance pairwise interactions. Default: `2.5`. threshold_alpha, threshold_beta Double. Shape parameters beta-prime prior nuisance threshold parameters. iter, burnin Integer. Number Gibbs iterations (`iter`) burn-iterations (`burnin`). Defaults: `iter = 1e4`, `burnin = 5e2`. na_action Character. Specifies handling missing data. `\"listwise\"` deletes rows missing values; `\"impute\"` imputes values Gibbs sampling. Default: `\"listwise\"`. save Logical. true, sampled states parameters returned. Deprecated. save_main, save_pairwise, save_indicator Logical. Enable saving sampled states `main_effects`, `pairwise_effects`, `indicator`, respectively. Default: `FALSE`. display_progress Logical. Show progress bar computation. Default: `TRUE`.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgmCompare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Variable Selection or Bayesian Estimation for Differences in Markov Random Fields — bgmCompare","text":"list containing posterior means , optionally, sampled states based `save_*` options. returned components include: - `posterior_mean_main`, `posterior_mean_pairwise`, `posterior_mean_indicator` posterior means. - saving options enabled:   - `raw_samples_main` sampled states `main_effects`.   - `raw_samples_pairwise` sampled states `pairwise_effects`.   - `raw_samples_indicator` sampled states inclusion indicators. addition results analysis, output lists arguments call. useful post-processing results.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgmCompare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian Variable Selection or Bayesian Estimation for Differences in Markov Random Fields — bgmCompare","text":"### Pairwise Interactions Pairwise interactions variables `` `j` modeled : $$\\boldsymbol{\\theta}_{ij} = \\phi_{ij} + \\boldsymbol{\\delta}_{ij},$$ : - \\(\\boldsymbol{\\theta}_{ij}\\) vector pairwise interaction parameters length `G`. - \\(\\phi_{ij}\\) overall pairwise interaction (nuisance parameter). - \\(\\boldsymbol{\\delta}_{ij}\\) represents group-specific differences constrained sum zero identification. ### Ordinal Variables function supports two types ordinal variables: 1. **Regular ordinal variables**: Introduce threshold parameter category except lowest, modeled :    $$\\boldsymbol{\\mu}_{ic} = \\tau_{ic} + \\boldsymbol{\\epsilon}_{ic},$$    :    - \\(\\tau_{ic}\\) denotes overall effect (nuisance parameter).    - \\(\\boldsymbol{\\epsilon}_{ic}\\) represents group-specific differences constrained sum zero. 2. **Blume-Capel ordinal variables**: Assume specific reference category score responses based distance :    $$\\boldsymbol{\\mu}_{ic} = (\\tau_{i1} + \\boldsymbol{\\epsilon}_{i1}) \\cdot c + (\\tau_{i2} + \\boldsymbol{\\epsilon}_{i2}) \\cdot (c - r)^2,$$    :    - `r` reference category.    - \\(\\tau_{i1}\\) \\(\\tau_{i2}\\) nuisance parameters.    - \\(\\boldsymbol{\\epsilon}_{i1}\\) \\(\\boldsymbol{\\epsilon}_{i2}\\) represent group-specific differences. ### Variable Selection Bayesian variable selection enables testing parameter differences equivalence across groups. Independent spike--slab priors applied difference parameters: - **Bernoulli Model**: Assigns fixed probability parameter inclusion. - **Beta-Bernoulli Model**: Incorporates beta prior model inclusion probabilities. ### Saving Options Users can store sampled states parameters (`main_effects`, `pairwise_effects`, `indicator`) Gibbs sampling. Enabling options (`save_main`, `save_pairwise`, `save_indicator`) increases output size memory usage, use judiciously.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgms-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bgms: Bayesian Analysis of Networks of Binary and/or Ordinal Variables — bgms-package","title":"bgms: Bayesian Analysis of Networks of Binary and/or Ordinal Variables — bgms-package","text":"R package bgms provides tools Bayesian analysis ordinal Markov random field, graphical model describing network binary /ordinal variables (Marsman et al. press) . pseudolikelihood used approximate likelihood graphical model, Markov chain Monte Carlo methods used simulate corresponding pseudoposterior distribution graphical model parameters. bgm function can used one-sample design bgmCompare function can used two-independent-samples design (Marsman et al. 2024) . functions can model selection effects. one-sample designs, bgm function models presence absence edges pairs variables network. estimated posterior inclusion probability indicates plausible network edge two corresponding variables produced observed data, can converted Bayes factor test conditional independence. two-independent-samples designs, bgmCompare function models selection group differences edge weights possibly category thresholds. estimated posterior inclusion probability indicates plausible graphical models difference corresponding edge weight category threshold generated data hand, can converted Bayes factor test parameter equivalence. bgms package offers several tools analyzing structure MRF: Simulate response data MRF using Gibbs sampler. Simulate mrfSampler. Estimate posterior distribution MRF's parameters  possibly network structure one-sample designs. Bayesian estimation Bayesian edge selection bgm. Estimate posterior distribution MRF's parameters  two-independent-sample design, possibly perform selection group  differences MRF parameters. Bayesian estimation Bayesian difference selection bgmCompare.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/bgms-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"bgms: Bayesian Analysis of Networks of Binary and/or Ordinal Variables — bgms-package","text":"Marsman M, van den Bergh D, Haslbeck JMB (press). “Bayesian analysis ordinal Markov random field.” Psychometrika. Marsman M, Waldorp LJ, Sekulovski N, Haslbeck JMB (2024). “Bayesian independent samples \\(t\\) test parameter differences networks binary ordinal variables.” Retrieved https://osf.io/preprints/osf/f4pk9. OSF preprint.","code":""},{"path":[]},{"path":"https://maartenMarsman.github.io/bgms/reference/bgms-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bgms: Bayesian Analysis of Networks of Binary and/or Ordinal Variables — bgms-package","text":"Maintainer: Maarten Marsman m.marsman@uva.nl (ORCID) contributors: Giuseppe Arena (ORCID) [contributor] Karoline Huth (ORCID) [contributor] Nikola Sekulovski (ORCID) [contributor] Don van den Bergh (ORCID) [contributor]","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/extractor_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extractor Functions. — extract_arguments","title":"Extractor Functions. — extract_arguments","text":"Extractor Functions.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/extractor_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extractor Functions. — extract_arguments","text":"","code":"extract_arguments(bgms_object)  # S3 method for class 'bgms' extract_arguments(bgms_object)  # S3 method for class 'bgmCompare' extract_arguments(bgms_object)  extract_indicators(bgms_object)  # S3 method for class 'bgms' extract_indicators(bgms_object)  # S3 method for class 'bgmCompare' extract_indicators(bgms_object)  extract_posterior_inclusion_probabilities(bgms_object)  # S3 method for class 'bgms' extract_posterior_inclusion_probabilities(bgms_object)  # S3 method for class 'bgmCompare' extract_posterior_inclusion_probabilities(bgms_object)  extract_indicator_priors(bgms_object)  # S3 method for class 'bgms' extract_indicator_priors(bgms_object)  # S3 method for class 'bgmCompare' extract_indicator_priors(bgms_object)  extract_pairwise_interactions(bgms_object)  extract_category_thresholds(bgms_object)  extract_pairwise_difference.bgmCompare(bgms_object)  extract_main_difference.bgmCompare(bgms_object)  extract_edge_indicators(bgms_object)  extract_pairwise_thresholds(bgms_object)"},{"path":"https://maartenMarsman.github.io/bgms/reference/extractor_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extractor Functions. — extract_arguments","text":"bgms_object fit object created bgms package specifically bgm function.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/extractor_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extractor Functions. — extract_arguments","text":"Extract results bgm objects safe way. Mainly intended developers packages build top bgms package.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/mrfSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample observations from the ordinal MRF — mrfSampler","title":"Sample observations from the ordinal MRF — mrfSampler","text":"function samples states ordinal MRF using Gibbs sampler. Gibbs sampler initiated random values response options, proceeds simulating states variable logistic model using variable states predictor variables.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/mrfSampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample observations from the ordinal MRF — mrfSampler","text":"","code":"mrfSampler(   no_states,   no_variables,   no_categories,   interactions,   thresholds,   variable_type = \"ordinal\",   reference_category,   iter = 1000 )"},{"path":"https://maartenMarsman.github.io/bgms/reference/mrfSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample observations from the ordinal MRF — mrfSampler","text":"no_states number states ordinal MRF generated. no_variables number variables ordinal MRF. no_categories Either positive integer vector positive integers length no_variables. number response categories top base category: no_categories = 1 generates binary states. interactions symmetric no_variables no_variables matrix pairwise interactions. -diagonal elements used. thresholds no_variables max(no_categories) matrix category thresholds. elements row indicate thresholds variable . no_categories vector, first no_categories[] elements used row . Blume-Capel model used category thresholds variable , row requires two values (details ); first \\(\\alpha\\), linear contribution Blume-Capel model second \\(\\beta\\), quadratic contribution. variable_type kind variables simulated? Can single character string specifying variable type p variables vector character strings length p specifying type variable separately. Currently, bgm supports “ordinal” “blume-capel”. Binary variables automatically treated “ordinal’’. Defaults variable_type = \"ordinal\". reference_category integer vector length no_variables specifying reference_category category used Blume-Capel model (details ). Can integer value 0 no_categories (no_categories[]). iter number iterations used Gibbs sampler. function provides last state Gibbs sampler output. default set 1e3.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/mrfSampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample observations from the ordinal MRF — mrfSampler","text":"no_states no_variables matrix simulated states ordinal MRF.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/mrfSampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample observations from the ordinal MRF — mrfSampler","text":"two modeling options category thresholds. default option assumes category thresholds free, except first threshold set zero identification. user needs specify thresholds remaining response categories. option useful type ordinal variable gives user freedom specifying model. Blume-Capel option specifically designed ordinal variables special type reference_category category, neutral category Likert scale. Blume-Capel model specifies following quadratic model threshold parameters: $$\\mu_{\\text{c}} = \\alpha \\times \\text{c} + \\beta \\times (\\text{c} - \\text{r})^2,$$ \\(\\mu_{\\text{c}}\\) threshold category c (now includes zero), \\(\\alpha\\) offers linear trend across categories (increasing threshold values \\(\\alpha > 0\\) decreasing threshold values \\(\\alpha <0\\)), \\(\\beta < 0\\), offers increasing penalty responding category away reference_category category r, \\(\\beta > 0\\) suggests preference responding reference_category category.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/mrfSampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample observations from the ordinal MRF — mrfSampler","text":"","code":"# Generate responses from a network of five binary and ordinal variables. no_variables = 5 no_categories = sample(1:5, size = no_variables, replace = TRUE)  Interactions = matrix(0, nrow = no_variables, ncol = no_variables) Interactions[2, 1] = Interactions[4, 1] = Interactions[3, 2] =   Interactions[5, 2] = Interactions[5, 4] = .25 Interactions = Interactions + t(Interactions) Thresholds = matrix(0, nrow = no_variables, ncol = max(no_categories))  x = mrfSampler(no_states = 1e3,                no_variables = no_variables,                no_categories = no_categories,                interactions = Interactions,                thresholds = Thresholds) #> Warning: The matrix ``thresholds'' contains numeric values for variable 3 for category  #> (categories, i.e., columns) exceding the maximum of 1. These values will  #> be ignored. #> Warning: The matrix ``thresholds'' contains numeric values for variable 4 for category  #> (categories, i.e., columns) exceding the maximum of 2. These values will  #> be ignored.  # Generate responses from a network of 2 ordinal and 3 Blume-Capel variables. no_variables = 5 no_categories = 4  Interactions = matrix(0, nrow = no_variables, ncol = no_variables) Interactions[2, 1] = Interactions[4, 1] = Interactions[3, 2] =   Interactions[5, 2] = Interactions[5, 4] = .25 Interactions = Interactions + t(Interactions)  Thresholds = matrix(NA, no_variables, no_categories) Thresholds[, 1] = -1 Thresholds[, 2] = -1 Thresholds[3, ] = sort(-abs(rnorm(4)), decreasing = TRUE) Thresholds[5, ] = sort(-abs(rnorm(4)), decreasing = TRUE)  x = mrfSampler(no_states = 1e3,                no_variables = no_variables,                no_categories = no_categories,                interactions = Interactions,                thresholds = Thresholds,                variable_type = c(\"b\",\"b\",\"o\",\"b\",\"o\"),                reference_category = 2)"},{"path":"https://maartenMarsman.github.io/bgms/reference/print.bgmCompare.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for bgms objects — print.bgmCompare","title":"Print method for bgms objects — print.bgmCompare","text":"Used prevent bgms output cluttering console.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/print.bgmCompare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for bgms objects — print.bgmCompare","text":"","code":"# S3 method for class 'bgmCompare' print(x, ...)"},{"path":"https://maartenMarsman.github.io/bgms/reference/print.bgmCompare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for bgms objects — print.bgmCompare","text":"x object class bgms. ... Ignored.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/print.bgms.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for bgms objects — print.bgms","title":"Print method for bgms objects — print.bgms","text":"Used prevent bgms output cluttering console.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/print.bgms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for bgms objects — print.bgms","text":"","code":"# S3 method for class 'bgms' print(x, ...)"},{"path":"https://maartenMarsman.github.io/bgms/reference/print.bgms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for bgms objects — print.bgms","text":"x object class bgms. ... Ignored.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/summarySBM.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for summarizing the sampled cluster allocation vectors — summarySBM","title":"Function for summarizing the sampled cluster allocation vectors — summarySBM","text":"Th summarySBM function summarizes sampled allocation vectors iteration Gibbs sampler output  bgm function ran edge_prior = \"Stochastic-Block\" save = TRUE. also estimates posterior distribution number clusters.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/summarySBM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for summarizing the sampled cluster allocation vectors — summarySBM","text":"","code":"summarySBM(bgm_object, internal_call = FALSE)"},{"path":"https://maartenMarsman.github.io/bgms/reference/summarySBM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for summarizing the sampled cluster allocation vectors — summarySBM","text":"bgm_object fit object created bgm function. internal_call logical value indicating whether function used within bgms calculating posterior probabilities number clusters user. argument always set FALSE.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/summarySBM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for summarizing the sampled cluster allocation vectors — summarySBM","text":"Returns list two elements: components allocations, containing posterior probabilities number components (clusters) estimated cluster allocation nodes using Dahl's method.","code":""},{"path":"https://maartenMarsman.github.io/bgms/reference/summarySBM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for summarizing the sampled cluster allocation vectors — summarySBM","text":"","code":"# \\donttest{   # fit a model with the SBM prior   bgm_object = bgm(     Wenchuan[, c(1:5)],     edge_prior = \"Stochastic-Block\",     save = TRUE) #> Warning: There were 7 rows with missing observations in the input matrix x. #> Since na_action = listwise these rows were excluded from the analysis.    summarySBM(bgm_object) #> $components #>      num_components probability #> [1,]              1 0.683038670 #> [2,]              2 0.242103696 #> [3,]              3 0.060658230 #> [4,]              4 0.012086772 #> [5,]              5 0.002112631 #>  #> $allocations #> [1] 1 1 1 1 1 #>  # }"},{"path":[]},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"new-features-0-1-4-3","dir":"Changelog","previous_headings":"","what":"New features","title":"bgms 0.1.4.3","text":"bgmCompare function now allows network comparison two groups. new summary_sbm function can used summarize output bgm function “Stochastic-Block” prior.","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"other-changes-0-1-4-3","dir":"Changelog","previous_headings":"","what":"Other changes","title":"bgms 0.1.4.3","text":"bgm function “Stochastic-Block” prior can now also return sampled allocations block probabilities, sample return number blocks. underlying R c++ functions received massive update improve efficiency maintainance.","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"bug-fixes-0-1-4-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bgms 0.1.4.3","text":"Fixed bug bgmCompare function selecting group differences blume-capel parameters. Parameter differences selected fixed zero still updated. Fixed bug bgmCompare function handling samples blume-capel parameters. Output properly stored. Fixed bug bgmCompare function handling threshold estimation missing categories main_model = “Free”. sufficient statistics number categories computed correctly.","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"bgms-0142","dir":"Changelog","previous_headings":"","what":"bgms 0.1.4.2","title":"bgms 0.1.4.2","text":"CRAN release: 2024-12-05 Fixed bug adjusting variance proposal distributions. Fixed bug recoding data “collapse” condition. selection = true, run 2 * burnin iterations instead 1 * burnin burnin phase. helps ensure Markov chain used estimating pseudoposterior starts good parameter values proposals properly calibrated. rare cases, Markov chain get stuck . default setting burnin also changed 1000 500. Changed maximum standard deviation adaptive proposal 20 back 2.","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"bgms-0141","dir":"Changelog","previous_headings":"","what":"bgms 0.1.4.1","title":"bgms 0.1.4.1","text":"CRAN release: 2024-11-12 minor release adds documentation output bug fixes.","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"bgms-014","dir":"Changelog","previous_headings":"","what":"bgms 0.1.4","title":"bgms 0.1.4","text":"CRAN release: 2024-10-20","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"new-features-0-1-4","dir":"Changelog","previous_headings":"","what":"New features","title":"bgms 0.1.4","text":"Comparing category threshold pairwise interaction parameters two independent samples bgmCompare(). Stochastic Block model new prior option network structure bgm().","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"other-changes-0-1-4","dir":"Changelog","previous_headings":"","what":"Other changes","title":"bgms 0.1.4","text":"Exported extractor functions extract results bgm objects safe way. Changed maximum standard deviation adaptive proposal 2 20. small bug fixes.","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"bgms-013","dir":"Changelog","previous_headings":"","what":"bgms 0.1.3","title":"bgms 0.1.3","text":"CRAN release: 2024-02-25","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"new-features-0-1-3","dir":"Changelog","previous_headings":"","what":"New features","title":"bgms 0.1.3","text":"Added support Bayesian estimation without edge selection bgm(). Added support simulating data (mixed) binary, ordinal, Blume-Capel MRF mrfSampler() Added support analyzing (mixed) binary, ordinal, Blume-Capel variables bgm()","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"user-level-changes-0-1-3","dir":"Changelog","previous_headings":"","what":"User level changes","title":"bgms 0.1.3","text":"Removed support optimization based functions, mple(), mppe(), bgm.em() Removed support Unit-Information prior bgm() Removed support non-adaptive Metropolis bgm() Reduced file size saving raw MCMC samples","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"bgms-012","dir":"Changelog","previous_headings":"","what":"bgms 0.1.2","title":"bgms 0.1.2","text":"CRAN release: 2023-10-13 minor release adds bug fixes.","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"bgms-011","dir":"Changelog","previous_headings":"","what":"bgms 0.1.1","title":"bgms 0.1.1","text":"CRAN release: 2023-09-01 minor release adding new features fixing minor bugs.","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"bgms 0.1.1","text":"Missing data imputation bgm function. See na.action option. Prior distributions network structure bgm function. See edge_prior option. Adaptive Metropolis alternative current random walk Metropolis algorithm bgm function. See adaptive option.","code":""},{"path":"https://maartenMarsman.github.io/bgms/news/index.html","id":"user-level-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"User level changes","title":"bgms 0.1.1","text":"Changed default specification interaction prior UnitInfo Cauchy. See interaction_prior option. Changed default threshold hyperparameter specification 1.0 0.5. See threshold_alpha threshold_beta options. Analysis output now uses column names data.","code":""}]
